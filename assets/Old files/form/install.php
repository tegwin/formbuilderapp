<?php
/**
 * Installer for Dynamic Form Builder (Standalone Version)
 * 
 * This script guides users through the process of setting up the form builder application
 */

// Start session for installation progress
session_start();

// Define installation steps
$steps = [
    1 => 'Welcome',
    2 => 'Requirements Check',
    3 => 'Database Setup',
    4 => 'Configuration',
    5 => 'Installation',
    6 => 'Complete'
];

// Get current step
$step = isset($_GET['step']) ? (int)$_GET['step'] : 1;

// Installation directory
$install_dir = dirname(__FILE__);

// Define required PHP extensions
$required_extensions = ['mysqli', 'pdo', 'pdo_mysql', 'json', 'session', 'gd'];

// Function to check if a directory is writable
function is_writable_recursive($dir) {
    if (!is_writable($dir)) {
        return false;
    }
    
    $handle = opendir($dir);
    while (($file = readdir($handle)) !== false) {
        if ($file != '.' && $file != '..') {
            $path = $dir . '/' . $file;
            if (is_dir($path)) {
                if (!is_writable_recursive($path)) {
                    closedir($handle);
                    return false;
                }
            } else {
                if (!is_writable($path)) {
                    closedir($handle);
                    return false;
                }
            }
        }
    }
    closedir($handle);
    return true;
}

// Function to create directory if it doesn't exist
function create_directory($path) {
    if (!file_exists($path)) {
        return mkdir($path, 0755, true);
    }
    return true;
}

// Function to test database connection
function test_db_connection($host, $username, $password, $database) {
    try {
        $db = new PDO("mysql:host=$host", $username, $password);
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
        // Check if database exists
        $stmt = $db->query("SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '$database'");
        $database_exists = (bool)$stmt->fetchColumn();
        
        if (!$database_exists) {
            // Try to create database
            $db->exec("CREATE DATABASE `$database` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
        }
        
        // Connect to the database to confirm it works
        $db = new PDO("mysql:host=$host;dbname=$database", $username, $password);
        
        return ['success' => true, 'message' => 'Database connection successful!'];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database connection error: ' . $e->getMessage()];
    }
}

// Function to write configuration file
function write_config_file($config) {
    $config_file = dirname(__FILE__) . '/config.php';
    
    $content = "<?php\n/**\n * Configuration file for Form Builder\n * Generated by installer\n */\n\n";
    $content .= "return [\n";
    
    foreach ($config as $key => $value) {
        if (is_string($value)) {
            $content .= "    '$key' => '$value',\n";
        } else {
            $content .= "    '$key' => $value,\n";
        }
    }
    
    $content .= "];\n";
    
    return file_put_contents($config_file, $content);
}

// Function to install database tables
function install_database($config) {
    try {
        $db = new PDO("mysql:host={$config['db_host']};dbname={$config['db_name']}", $config['db_user'], $config['db_password']);
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
        // Create forms table
        $db->exec("CREATE TABLE IF NOT EXISTS `dfb_forms` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `title` varchar(255) NOT NULL,
            `description` text,
            `email_recipients` text,
            `webhook_url` varchar(255),
            `success_message` text,
            `created_at` datetime NOT NULL,
            `updated_at` datetime NOT NULL,
            PRIMARY KEY (`id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;");
        
        // Create form fields table
        $db->exec("CREATE TABLE IF NOT EXISTS `dfb_form_fields` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `form_id` int(11) NOT NULL,
            `field_type` varchar(50) NOT NULL,
            `label` varchar(255) NOT NULL,
            `placeholder` text,
            `options` text,
            `required` tinyint(1) DEFAULT 0,
            `field_order` int(11) DEFAULT 0,
            `field_class` varchar(255),
            `field_id` varchar(255),
            `validation_rules` text,
            `created_at` datetime NOT NULL,
            `updated_at` datetime NOT NULL,
            PRIMARY KEY (`id`),
            KEY `form_id` (`form_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;");
        
        // Create form entries table
        $db->exec("CREATE TABLE IF NOT EXISTS `dfb_form_entries` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `form_id` int(11) NOT NULL,
            `entry_data` longtext NOT NULL,
            `user_ip` varchar(100),
            `user_agent` text,
            `submitted_at` datetime NOT NULL,
            PRIMARY KEY (`id`),
            KEY `form_id` (`form_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;");
        
        // Create a sample form
        $now = date('Y-m-d H:i:s');
        
        $db->exec("INSERT INTO `dfb_forms` 
            (`title`, `description`, `email_recipients`, `success_message`, `created_at`, `updated_at`) 
            VALUES 
            ('Contact Form', 'Please fill out the form below to get in touch with us.', '{$config['admin_email']}', 'Thank you for your message! We will get back to you soon.', '$now', '$now')");
        
        $form_id = $db->lastInsertId();
        
        // Add some sample fields to the form
        $fields = [
            [
                'field_type' => 'text',
                'label' => 'Full Name',
                'placeholder' => 'Enter your full name',
                'required' => 1,
                'field_order' => 0
            ],
            [
                'field_type' => 'email',
                'label' => 'Email Address',
                'placeholder' => 'Enter your email address',
                'required' => 1,
                'field_order' => 1
            ],
            [
                'field_type' => 'select',
                'label' => 'Subject',
                'placeholder' => 'Please select a subject',
                'options' => "General Inquiry\nSupport Request\nFeedback\nOther",
                'required' => 1,
                'field_order' => 2
            ],
            [
                'field_type' => 'textarea',
                'label' => 'Message',
                'placeholder' => 'Enter your message',
                'required' => 1,
                'field_order' => 3
            ]
        ];
        
        $stmt = $db->prepare("INSERT INTO `dfb_form_fields` 
            (`form_id`, `field_type`, `label`, `placeholder`, `options`, `required`, `field_order`, `created_at`, `updated_at`) 
            VALUES 
            (:form_id, :field_type, :label, :placeholder, :options, :required, :field_order, :created_at, :updated_at)");
        
        foreach ($fields as $field) {
            $stmt->execute([
                'form_id' => $form_id,
                'field_type' => $field['field_type'],
                'label' => $field['label'],
                'placeholder' => $field['placeholder'],
                'options' => isset($field['options']) ? $field['options'] : '',
                'required' => $field['required'],
                'field_order' => $field['field_order'],
                'created_at' => $now,
                'updated_at' => $now
            ]);
        }
        
        return ['success' => true, 'message' => 'Database tables created successfully!'];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database installation error: ' . $e->getMessage()];
    }
}

// Process form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Database setup form
    if (isset($_POST['db_setup'])) {
        $db_host = $_POST['db_host'];
        $db_name = $_POST['db_name'];
        $db_user = $_POST['db_user'];
        $db_password = $_POST['db_password'];
        
        $db_test = test_db_connection($db_host, $db_user, $db_password, $db_name);
        
        if ($db_test['success']) {
            $_SESSION['db_config'] = [
                'db_host' => $db_host,
                'db_name' => $db_name,
                'db_user' => $db_user,
                'db_password' => $db_password
            ];
            
            // Move to next step
            header("Location: install.php?step=4");
            exit;
        } else {
            $db_error = $db_test['message'];
        }
    }
    
    // Application configuration form
    if (isset($_POST['app_config'])) {
        $site_name = $_POST['site_name'];
        $admin_email = $_POST['admin_email'];
        
        // Validate inputs
        $valid = true;
        
        if (empty($site_name)) {
            $site_name_error = 'Site name is required';
            $valid = false;
        }
        
        if (empty($admin_email) || !filter_var($admin_email, FILTER_VALIDATE_EMAIL)) {
            $admin_email_error = 'Valid admin email is required';
            $valid = false;
        }
        
        if ($valid) {
            $_SESSION['app_config'] = [
                'site_name' => $site_name,
                'admin_email' => $admin_email,
                'upload_dir' => 'uploads/',
                'max_file_size' => 5 * 1024 * 1024, // 5MB
                'allowed_file_types' => 'jpg,jpeg,png,gif,pdf,doc,docx,xls,xlsx,zip',
                'enable_captcha' => false,
                'session_timeout' => 1800 // 30 minutes
            ];
            
            // Move to next step
            header("Location: install.php?step=5");
            exit;
        }
    }
    
    // Installation form
    if (isset($_POST['install'])) {
        // Merge configs
        $config = array_merge($_SESSION['db_config'], $_SESSION['app_config']);
        
        // Create uploads directory
        $upload_dir = dirname(__FILE__) . '/' . $config['upload_dir'];
        $create_upload_dir = create_directory($upload_dir);
        
        if (!$create_upload_dir) {
            $install_error = 'Could not create uploads directory';
        } else {
            // Write configuration file
            $write_config = write_config_file($config);
            
            if (!$write_config) {
                $install_error = 'Could not write configuration file';
            } else {
                // Install database
                $install_db = install_database($config);
                
                if (!$install_db['success']) {
                    $install_error = $install_db['message'];
                } else {
                    // Installation successful
                    $_SESSION['installed'] = true;
                    
                    // Move to final step
                    header("Location: install.php?step=6");
                    exit;
                }
            }
        }
    }
}

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Form Builder Installer</title>
    <style>
        /* Installer Styles */
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
        }
        
        .container {
            max-width: 800px;
            margin: 30px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        
        .header h1 {
            margin: 0;
            color: #2196f3;
        }
        
        .steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        
        .step {
            text-align: center;
            flex: 1;
        }
        
        .step-number {
            display: inline-block;
            width: 30px;
            height: 30px;
            line-height: 30px;
            text-align: center;
            border-radius: 50%;
            background-color: #ddd;
            color: #666;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .step.active .step-number {
            background-color: #2196f3;
            color: white;
        }
        
        .step.completed .step-number {
            background-color: #4caf50;
            color: white;
        }
        
        .step-name {
            font-size: 12px;
            color: #666;
        }
        
        .step.active .step-name {
            color: #2196f3;
            font-weight: bold;
        }
        
        .content {
            margin-bottom: 30px;
        }
        
        .content h2 {
            margin-top: 0;
            color: #333;
        }
        
        .content p {
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        .form-group input[type="text"],
        .form-group input[type="password"],
        .form-group input[type="email"] {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        .form-group .error {
            color: #e53935;
            font-size: 14px;
            margin-top: 5px;
        }
        
        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 4px;
        }
        
        .alert-success {
            background-color: #e8f5e9;
            border-left: 4px solid #4caf50;
            color: #2e7d32;
        }
        
        .alert-danger {
            background-color: #ffebee;
            border-left: 4px solid #e53935;
            color: #c62828;
        }
        
        .requirements {
            margin-bottom: 20px;
        }
        
        .requirement {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .requirement:last-child {
            border-bottom: none;
        }
        
        .requirement-name {
            font-weight: 500;
        }
        
        .requirement-status {
            font-weight: bold;
        }
        
        .requirement-status.passed {
            color: #4caf50;
        }
        
        .requirement-status.failed {
            color: #e53935;
        }
        
        .buttons {
            display: flex;
            justify-content: space-between;
        }
        
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #2196f3;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            text-decoration: none;
            transition: background-color 0.2s;
        }
        
        .button:hover {
            background-color: #1976d2;
        }
        
        .button-secondary {
            background-color: #f5f5f5;
            color: #333;
            border: 1px solid #ddd;
        }
        
        .button-secondary:hover {
            background-color: #e5e5e5;
            color: #333;
        }
        
        .complete-message {
            text-align: center;
            margin: 40px 0;
        }
        
        .complete-message i {
            font-size: 60px;
            color: #4caf50;
            margin-bottom: 20px;
        }
        
        .complete-message h2 {
            margin-bottom: 20px;
            color: #4caf50;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Dynamic Form Builder Installer</h1>
        </div>
        
        <div class="steps">
            <?php foreach ($steps as $step_num => $step_name): ?>
                <div class="step <?php echo $step_num == $step ? 'active' : ($step_num < $step ? 'completed' : ''); ?>">
                    <div class="step-number"><?php echo $step_num; ?></div>
                    <div class="step-name"><?php echo $step_name; ?></div>
                </div>
            <?php endforeach; ?>
        </div>
        
        <div class="content">
            <?php if ($step == 1): ?>
                <h2>Welcome to Dynamic Form Builder</h2>
                <p>This installer will guide you through the process of setting up the Dynamic Form Builder application.</p>
                <p>Before proceeding, please make sure you have the following information ready:</p>
                <ul>
                    <li>Database server details (host, username, password)</li>
                    <li>A database name for the Form Builder</li>
                    <li>Basic site information</li>
                </ul>
                
                <div class="buttons">
                    <a href="install.php?step=2" class="button">Begin Installation</a>
                </div>
                
            <?php elseif ($step == 2): ?>
                <h2>Requirements Check</h2>
                <p>The system will now check if your server meets the requirements for running Dynamic Form Builder.</p>
                
                <div class="requirements">
                    <div class="requirement">
                        <div class="requirement-name">PHP Version (7.2+)</div>
                        <div class="requirement-status <?php echo version_compare(PHP_VERSION, '7.2.0') >= 0 ? 'passed' : 'failed'; ?>">
                            <?php echo version_compare(PHP_VERSION, '7.2.0') >= 0 ? 'Passed ('.PHP_VERSION.')' : 'Failed ('.PHP_VERSION.')'; ?>
                        </div>
                    </div>
                    
                    <?php foreach ($required_extensions as $ext): ?>
                        <div class="requirement">
                            <div class="requirement-name">PHP Extension: <?php echo $ext; ?></div>
                            <div class="requirement-status <?php echo extension_loaded($ext) ? 'passed' : 'failed'; ?>">
                                <?php echo extension_loaded($ext) ? 'Passed' : 'Failed'; ?>
                            </div>
                        </div>
                    <?php endforeach; ?>
                    
                    <div class="requirement">
                        <div class="requirement-name">Directory Writable</div>
                        <div class="requirement-status <?php echo is_writable_recursive($install_dir) ? 'passed' : 'failed'; ?>">
                            <?php echo is_writable_recursive($install_dir) ? 'Passed' : 'Failed'; ?>
                        </div>
                    </div>
                </div>
                
                <?php
                $requirements_met = version_compare(PHP_VERSION, '7.2.0') >= 0 && 
                                  array_reduce($required_extensions, function($carry, $ext) {
                                      return $carry && extension_loaded($ext);
                                  }, true) &&
                                  is_writable_recursive($install_dir);
                ?>
                
                <?php if (!$requirements_met): ?>
                    <div class="alert alert-danger">
                        <strong>Error:</strong> Your server does not meet the requirements for running Dynamic Form Builder. Please fix the issues highlighted above and try again.
                    </div>
                <?php endif; ?>
                
                <div class="buttons">
                    <a href="install.php?step=1" class="button button-secondary">Back</a>
                    <?php if ($requirements_met): ?>
                        <a href="install.php?step=3" class="button">Continue</a>
                    <?php else: ?>
                        <button class="button" disabled>Continue</button>
                    <?php endif; ?>
                </div>
                
            <?php elseif ($step == 3): ?>
                <h2>Database Setup</h2>
                <p>Please provide your database connection details below. If the database does not exist, the installer will attempt to create it for you.</p>
                
                <?php if (isset($db_error)): ?>
                    <div class="alert alert-danger">
                        <strong>Error:</strong> <?php echo $db_error; ?>
                    </div>
                <?php endif; ?>
                
                <form method="post" action="install.php?step=3">
                    <div class="form-group">
                        <label for="db_host">Database Host</label>
                        <input type="text" id="db_host" name="db_host" value="<?php echo isset($_POST['db_host']) ? htmlspecialchars($_POST['db_host']) : 'localhost'; ?>" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="db_name">Database Name</label>
                        <input type="text" id="db_name" name="db_name" value="<?php echo isset($_POST['db_name']) ? htmlspecialchars($_POST['db_name']) : 'form_builder'; ?>" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="db_user">Database Username</label>
                        <input type="text" id="db_user" name="db_user" value="<?php echo isset($_POST['db_user']) ? htmlspecialchars($_POST['db_user']) : 'root'; ?>" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="db_password">Database Password</label>
                        <input type="password" id="db_password" name="db_password" value="<?php echo isset($_POST['db_password']) ? htmlspecialchars($_POST['db_password']) : ''; ?>">
                    </div>
                    
                    <div class="buttons">
                        <a href="install.php?step=2" class="button button-secondary">Back</a>
                        <button type="submit" name="db_setup" class="button">Continue</button>
                    </div>
                </form>
                
            <?php elseif ($step == 4): ?>
                <h2>Application Configuration</h2>
                <p>Now, let's configure some basic settings for your Form Builder application.</p>
                
                <form method="post" action="install.php?step=4">
                    <div class="form-group">
                        <label for="site_name">Site Name</label>
                        <input type="text" id="site_name" name="site_name" value="<?php echo isset($_POST['site_name']) ? htmlspecialchars($_POST['site_name']) : 'Dynamic Form Builder'; ?>" required>
                        <?php if (isset($site_name_error)): ?>
                            <div class="error"><?php echo $site_name_error; ?></div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="form-group">
                        <label for="admin_email">Admin Email</label>
                        <input type="email" id="admin_email" name="admin_email" value="<?php echo isset($_POST['admin_email']) ? htmlspecialchars($_POST['admin_email']) : ''; ?>" required>
                        <small>Form submissions will be sent to this email address.</small>
                        <?php if (isset($admin_email_error)): ?>
                            <div class="error"><?php echo $admin_email_error; ?></div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="buttons">
                        <a href="install.php?step=3" class="button button-secondary">Back</a>
                        <button type="submit" name="app_config" class="button">Continue</button>
                    </div>
                </form>
                
            <?php elseif ($step == 5): ?>
                <h2>Installation</h2>
                <p>The system is now ready to install Dynamic Form Builder. Click the button below to begin the installation process.</p>
                
                <?php if (isset($install_error)): ?>
                    <div class="alert alert-danger">
                        <strong>Error:</strong> <?php echo $install_error; ?>
                    </div>
                <?php endif; ?>
                
                <form method="post" action="install.php?step=5">
                    <div class="buttons">
                        <a href="install.php?step=4" class="button button-secondary">Back</a>
                        <button type="submit" name="install" class="button">Install Now</button>
                    </div>
                </form>
                
            <?php elseif ($step == 6): ?>
                <?php if (isset($_SESSION['installed']) && $_SESSION['installed']): ?>
                    <div class="complete-message">
                        <i>✓</i>
                        <h2>Installation Complete!</h2>
                        <p>Dynamic Form Builder has been successfully installed. You can now start creating your forms.</p>
                    </div>
                    
                    <div class="buttons" style="justify-content: center;">
                        <a href="index.php" class="button">Go to Form Builder</a>
                    </div>
                    
                    <?php
                    // Clean up session
                    session_destroy();
                    ?>
                <?php else: ?>
                    <div class="alert alert-danger">
                        <strong>Error:</strong> Installation not complete. Please go through the installation process.
                    </div>
                    
                    <div class="buttons">
                        <a href="install.php?step=1" class="button">Start Over</a>
                    </div>
                <?php endif; ?>
            <?php endif; ?>
        </div>
    </div>
</body>
</html>